generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Base {
  id       String           @id @default(uuid())
  wishlist BookInWishlist[]
  forSale  BookForSale[]
  selling  Order[]          @relation(name: "sell")
  buying   Order[]          @relation(name: "buy")
  user     User?
  school   School?
  created  DateTime         @default(now())
  updated  DateTime         @updatedAt
}

model User {
  base        Base    @relation(fields: [id], references: [id])
  id          String  @id
  name        String?
  phoneNumber String? @unique
  discordId   String? @unique
  googleId    String? @unique
  facebookId  String? @unique
}

model School {
  base   Base   @relation(fields: [id], references: [id])
  id     String @id
  name   String
  abbr   String
  city   String
  region String
  schema Json
}

model Order {
  id       String      @id @default(uuid())
  status   OrderStatus
  seller   Base        @relation(name: "sell", fields: [sellerId], references: [id])
  sellerId String
  buyer    Base        @relation(name: "buy", fields: [buyerId], references: [id])
  buyerId  String
  books    OrderBook[]
  created  DateTime    @default(now())
  updated  DateTime    @updatedAt
}

model Book {
  isbn              String           @id
  title             String
  author            String
  price             Int
  image             String
  grade             Grade
  subject           Subject
  isAdvanced        Boolean
  url               String
  orderInstances    OrderBook[]
  wishlistInstances BookInWishlist[]
  forSaleInstances  BookForSale[]
  created           DateTime         @default(now())
  updated           DateTime         @updatedAt
}

model BookInWishlist {
  condition Condition?
  count     Int
  book      Book       @relation(fields: [isbn], references: [isbn])
  isbn      String
  buyer     Base       @relation(fields: [buyerId], references: [id])
  buyerId   String

  @@unique([isbn, buyerId])
}

model BookForSale {
  condition Condition
  count     Int
  book      Book      @relation(fields: [isbn], references: [isbn])
  isbn      String
  seller    Base      @relation(fields: [sellerId], references: [id])
  sellerId  String

  @@unique([condition, isbn, sellerId])
}

model OrderBook {
  condition Condition
  count     Int
  book      Book      @relation(fields: [isbn], references: [isbn])
  isbn      String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String

  @@unique([condition, isbn, orderId])
}

enum OrderStatus {
  PENDING
  DELIVERED
}

enum Condition {
  NEW
  GOOD
  DAMAGED
  BAD
}

enum Grade {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum Subject {
  MATH
  ENGLISH
  POLISH
  GERMAN
  RUSSIAN
  HISTORY
  CIVICS
  CHEMISTRY
  BIOLOGY
  GEOGRAPHY
  PHYSICS
  COMPUTER_SCIENCE
  ENTREPRENEURSHIP
  EDUCATION_FOR_SAFETY
}
