generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id           String    @id @default(uuid())
  name         String
  gradesNumber Int
  students     User[]
  profiles     Profile[]
  books        Book[]
  subjects     Subject[]
}

model BookGroup {
  id         String   @id @default(uuid())
  Profile    Profile? @relation(fields: [profileId], references: [id])
  profileId  String?
  isOptional Boolean
  books      Book[]
}

model Profile {
  id        String      @id @default(uuid())
  name      String
  school    School?     @relation(fields: [schoolId], references: [id])
  schoolId  String?
  BookGroup BookGroup[]
  User      User[]
  Grade     Grade?      @relation(fields: [gradeId], references: [id])
  gradeId   Int?
}

model User {
  id          String         @id @default(uuid())
  name        String
  phoneNumber String?        @unique
  discordId   String?        @unique
  googleId    String?        @unique
  facebookId  String?        @unique
  school      School?        @relation(fields: [schoolId], references: [id])
  schoolId    String?
  profile     Profile?       @relation(fields: [profileId], references: [id])
  profileId   String?
  grade       Grade?         @relation(fields: [gradeId], references: [id])
  gradeId     Int?
  books       BookInstance[]
}

model Book {
  id          String         @id @default(uuid())
  title       String
  author      String
  price       Decimal
  image       String
  subject     Subject        @relation(fields: [subjectName], references: [name])
  subjectName String
  isAdvanced  Boolean
  url         String         @unique
  instances   BookInstance[]
  School      School[]
  BookGroup   BookGroup[]
  Grade       Grade[]
}

model BookInstance {
  id        String    @id @default(uuid())
  status    String
  bookId    String
  book      Book      @relation(fields: [bookId], references: [id])
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  condition Condition
}

enum Condition {
  NEW
  GOOD
  DAMAGED
  BAD
}

model Grade {
  id      Int       @id @unique @default(autoincrement())
  name    String
  User    User[]
  Book    Book[]
  Profile Profile[]
}

model Subject {
  name   String   @id @unique
  alias  String?  @unique
  Book   Book[]
  School School[]
}
